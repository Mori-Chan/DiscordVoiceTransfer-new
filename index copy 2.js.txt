const fs = require('node:fs');
const path = require('node:path');
const { Client, Collection, Events, GatewayIntentBits } = require('discord.js');
const { LISTENER, SPEAKER } = require('./config.json');
// const { TOKEN } = require('./config.json');

// Create a new client instance
// const Listener_client = new Client({ intents: [GatewayIntentBits.Guilds] });
// const Speaker_client = new Client({ intents: [GatewayIntentBits.Guilds] });
const clients = [ new Client({ intents: [GatewayIntentBits.Guilds] }), new Client({ intents: [GatewayIntentBits.Guilds] }) ];

clients[0].commands = new Collection();
clients[1].commands = new Collection();

const commandsPath = path.join(__dirname, 'commands');
const ListenerCommandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js') && (file.startsWith('listener') || file.startsWith('bye')));
const SpeakerCommandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js') && (file.startsWith('speaker') || file.startsWith('bye')));

for (const file of ListenerCommandFiles) {
	const filePath = path.join(commandsPath, file);
	const command = require(filePath);
	// Set a new item in the Collection with the key as the command name and the value as the exported module
	if ('data' in command && 'execute' in command) {
		clients[0].commands.set(command.data.name, command);
	} else {
		console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
	}
}

for (const file of SpeakerCommandFiles) {
	const filePath = path.join(commandsPath, file);
	const command = require(filePath);
	// Set a new item in the Collection with the key as the command name and the value as the exported module
	if ('data' in command && 'execute' in command) {
		clients[1].commands.set(command.data.name, command);
	} else {
		console.log(`[WARNING] The command at ${filePath} is missing a required "data" or "execute" property.`);
	}
}

clients[0].on(Events.InteractionCreate, async interaction => {
	if (!interaction.isChatInputCommand()) return;
	console.log(interaction);
	const command = interaction.client.commands.get(interaction.commandName);

	if (!command) {
		console.error(`No command matching ${interaction.commandName} was found.`);
		return;
	}

	try {
		await command.execute(interaction);
	} catch (error) {
		console.error(error);
		await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
	}
});

clients[1].on(Events.InteractionCreate, async interaction => {
	if (!interaction.isChatInputCommand()) return;
	console.log(interaction);
	const command = interaction.client.commands.get(interaction.commandName);

	if (!command) {
		console.error(`No command matching ${interaction.commandName} was found.`);
		return;
	}

	try {
		await command.execute(interaction);
	} catch (error) {
		console.error(error);
		await interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true });
	}
});

clients[0].once(Events.ClientReady, c => {
	console.log(`Ready! Logged in as ${c.user.tag}`);
});
clients[1].once(Events.ClientReady, c => {
	console.log(`Ready! Logged in as ${c.user.tag}`);
});

clients[0].login(LISTENER.TOKEN);
clients[1].login(SPEAKER.TOKEN);